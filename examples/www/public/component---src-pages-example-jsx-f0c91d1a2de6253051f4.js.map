{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/pages/example.jsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["loader","enqueue","React","createContext","IndexPage","contentfulIndex","data","bannerProps","title","get","subtitle","label","FeaturedPhotoBanner","imgSrc","style","backgroundColor","deepPurple","Divider","invert","variant","gutterBottom","fill","Section","Grid","container","justify","map","obj","Feature","body","key","contentful_id","Wrapper","TwoColumnPanel","Button","size","color","Container","maxWidth","position","zIndex","spacing","ProjectCard","name","description","to","NewsCard","query","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"wJAcyBA,QAAOC,QAELC,IAAMC,cAAc,I,uFCoHhCC,UA3HG,SAAC,GAAmC,IAAzBC,EAAwB,EAAhCC,KAAQD,gBACrBE,EAAc,CAClBC,MAAOC,cAAIJ,EAAiB,cAC5BK,SAAUD,cACRJ,EACA,0BAEFM,MAAOF,cAAIJ,EAAiB,eAG9B,OACE,oCACE,kBAAC,aAAWO,oBAAZ,iBACML,EADN,CAEEM,OAAQJ,cAAIJ,EAAiB,uBAC7BS,MAAO,CACLC,gBAAiBC,IAAW,SAGhC,kBAAC,aAAWC,QAAZ,CACEC,QAAM,EACNC,QAAQ,QACRC,cAAY,EACZC,KAAML,IAAW,OAEnB,kBAAC,aAAWM,QAAZ,CACEd,MAAOC,cAAIJ,EAAiB,qBAC5BK,SAAUD,cACRJ,EACA,kCAGF,kBAACkB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,gBACrBhB,cAAIJ,EAAiB,QAAS,IAAIqB,KAAI,SAACC,GAAD,OACrC,kBAAC,aAAWC,QAAZ,CACEC,KAAMpB,cAAIkB,EAAK,2BACfd,OAAQJ,cAAIkB,EAAK,kBACjBG,IAAKH,EAAII,cACTvB,MAAOmB,EAAInB,aAMnB,kBAAC,aAAWwB,QAAZ,KACE,kBAAC,aAAWC,eAAZ,CACEzB,MAAOC,cACLJ,EACA,uBAEFK,SAAUD,cACRJ,EACA,uBAEFwB,KACE,oCACGpB,cACCJ,EACA,mCAEF,kBAAC6B,EAAA,EAAD,CACEC,KAAK,QACLhB,QAAQ,YACRiB,MAAM,WAHR,qBAYR,kBAACC,EAAA,EAAD,CACEC,SAAS,KACTxB,MAAO,CAAEyB,SAAU,WAAYC,OAAQ,IAEvC,kBAACjB,EAAA,EAAD,CAAMC,WAAS,EAACiB,QAAS,IACvB,kBAAC,aAAWC,YAAZ,CACE/B,MAAM,MACNgC,KAAK,SACLnC,MAAM,oDACNoC,YAAY,0EACZ/B,OAAO,wIACPgC,GAAG,eAKT,kBAAC,aAAWvB,QAAZ,CACEd,MAAM,mBACNE,SAAS,qHAET,kBAACa,EAAA,EAAD,CAAMC,WAAS,EAACiB,QAAS,GACvB,kBAAC,aAAWK,SAAZ,CACEnC,MAAM,oBACNgC,KAAK,YACLnC,MAAM,mDACNoC,YAAY,gGACZ/B,OAAO,wIACPgC,GAAG,aAEL,kBAAC,aAAWC,SAAZ,CACEnC,MAAM,UACNgC,KAAK,SACLnC,MAAM,+BACNoC,YAAY,0EACZ/B,OAAO,wIACPgC,GAAG,aAEL,kBAAC,aAAWC,SAAZ,CACEnC,MAAM,UACNgC,KAAK,SACLnC,MAAM,+BACNoC,YAAY,0EACZ/B,OAAO,sIACPgC,GAAG,iBAnHf,IA6HaE,EAAK,a,oBCtIlB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,2ECsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGErD,IAAMsD,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-example-jsx-f0c91d1a2de6253051f4.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from 'react';\r\nimport { get } from 'lodash';\r\nimport { Link, graphql } from 'gatsby';\r\nimport { Components } from 'q3-ui';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { deepPurple } from '@material-ui/core/colors';\r\n\r\nconst IndexPage = ({ data: { contentfulIndex } }) => {\r\n  const bannerProps = {\r\n    title: get(contentfulIndex, 'hero.title'),\r\n    subtitle: get(\r\n      contentfulIndex,\r\n      'hero.subtitle.subtitle',\r\n    ),\r\n    label: get(contentfulIndex, 'hero.label'),\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Components.FeaturedPhotoBanner\r\n        {...bannerProps}\r\n        imgSrc={get(contentfulIndex, 'hero.image.file.url')}\r\n        style={{\r\n          backgroundColor: deepPurple[100],\r\n        }}\r\n      />\r\n      <Components.Divider\r\n        invert\r\n        variant=\"wave4\"\r\n        gutterBottom\r\n        fill={deepPurple[100]}\r\n      />\r\n      <Components.Section\r\n        title={get(contentfulIndex, 'aboutHeader.title')}\r\n        subtitle={get(\r\n          contentfulIndex,\r\n          'aboutHeader.subtitle.subtitle',\r\n        )}\r\n      >\r\n        <Grid container justify=\"space-around\">\r\n          {get(contentfulIndex, 'about', []).map((obj) => (\r\n            <Components.Feature\r\n              body={get(obj, 'description.description')}\r\n              imgSrc={get(obj, 'image.file.url')}\r\n              key={obj.contentful_id}\r\n              title={obj.title}\r\n            />\r\n          ))}\r\n        </Grid>\r\n      </Components.Section>\r\n\r\n      <Components.Wrapper>\r\n        <Components.TwoColumnPanel\r\n          title={get(\r\n            contentfulIndex,\r\n            'serviceHeader.label',\r\n          )}\r\n          subtitle={get(\r\n            contentfulIndex,\r\n            'serviceHeader.title',\r\n          )}\r\n          body={\r\n            <>\r\n              {get(\r\n                contentfulIndex,\r\n                'serviceHeader.subtitle.subtitle',\r\n              )}\r\n              <Button\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Talk to sales\r\n              </Button>\r\n            </>\r\n          }\r\n        />\r\n      </Components.Wrapper>\r\n\r\n      <Container\r\n        maxWidth=\"lg\"\r\n        style={{ position: 'relative', zIndex: 2 }}\r\n      >\r\n        <Grid container spacing={10}>\r\n          <Components.ProjectCard\r\n            label=\"OMG\"\r\n            name=\"Gentek\"\r\n            title=\"Centralized API for clients, orders and resellers\"\r\n            description=\"We've created an extensible Express JS starter service for RESTful APIs\"\r\n            imgSrc=\"https://images.unsplash.com/photo-1569267528346-723440a07cd5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\"\r\n            to=\"/contact\"\r\n          />\r\n        </Grid>\r\n      </Container>\r\n\r\n      <Components.Section\r\n        title=\"In the community\"\r\n        subtitle=\"We're active in the space, blogging and producing open-source packages. Checkout some of our insights or projects\"\r\n      >\r\n        <Grid container spacing={2}>\r\n          <Components.NewsCard\r\n            label=\"Component Library\"\r\n            name=\"Q3 Client\"\r\n            title=\"Material UI Gatsby and React App implementations\"\r\n            description=\"We've created a component library for rapidly prototyping and deploying professional services\"\r\n            imgSrc=\"https://images.unsplash.com/photo-1569261152203-3b9ff82caaaa?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\"\r\n            to=\"/contact\"\r\n          />\r\n          <Components.NewsCard\r\n            label=\"Starter\"\r\n            name=\"Q3 API\"\r\n            title=\"Express and Mongoose starter\"\r\n            description=\"We've created an extensible Express JS starter service for RESTful APIs\"\r\n            imgSrc=\"https://images.unsplash.com/photo-1569267528346-723440a07cd5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\"\r\n            to=\"/contact\"\r\n          />\r\n          <Components.NewsCard\r\n            label=\"Starter\"\r\n            name=\"Q3 API\"\r\n            title=\"Express and Mongoose starter\"\r\n            description=\"We've created an extensible Express JS starter service for RESTful APIs\"\r\n            imgSrc=\"https://images.unsplash.com/photo-1558478856-a4a566c8aa6d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1225&q=80\"\r\n            to=\"/contact\"\r\n          />\r\n        </Grid>\r\n      </Components.Section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n\r\nexport const query = graphql`\r\n  query {\r\n    contentfulIndex {\r\n      serviceHeader {\r\n        title\r\n        label\r\n        subtitle {\r\n          subtitle\r\n        }\r\n      }\r\n      services {\r\n        name\r\n        description {\r\n          description\r\n        }\r\n        cases {\r\n          client\r\n          logo {\r\n            file {\r\n              url\r\n            }\r\n          }\r\n        }\r\n      }\r\n      aboutHeader {\r\n        title\r\n        label\r\n        subtitle {\r\n          subtitle\r\n        }\r\n      }\r\n      about {\r\n        contentful_id\r\n        title\r\n        description {\r\n          description\r\n        }\r\n        image {\r\n          title\r\n          file {\r\n            url\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}